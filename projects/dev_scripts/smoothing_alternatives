import numpy as np
import matplotlib.pyplot as plt

# Define auxiliary functions
def max_boltzmann(xi, alpha):
    shift = np.sign(alpha) * max(np.sign(alpha) * xi)
    num = np.sum(xi * np.exp(alpha * (xi - shift)))
    denom = np.sum(np.exp(alpha * (xi - shift))) + np.finfo(float).eps
    return num / denom

def max_logsumexp(xi, alpha):
    shift = np.sign(alpha) * max(np.sign(alpha) * xi)
    num = np.log(np.sum(np.exp(alpha * (xi - shift)))) + alpha * shift
    return num / alpha

def max_pnorm(xi, alpha):
    return np.sum(xi**alpha)**(1/alpha)

# Example 1: Smooth maximum
x = np.linspace(0, 2, 101)
f1 = x
f2 = 1 +0*x
in_data = [f1, f2]

# Compute different maximum approximations for each element
alpha = -50
f_max = []
f_boltzman = []
f_logsumexp = []
f_pnorm = []

for i in range(len(x)):
    xi = np.asarray([in_data[j][i] for j in range(len(in_data))])
    f_max.append(np.sign(alpha) * max(np.sign(alpha) * xi))
    f_boltzman.append(max_boltzmann(xi, alpha))
    f_logsumexp.append(max_logsumexp(xi, alpha))
    f_pnorm.append(max_pnorm(xi, alpha))

# Convert the lists to NumPy arrays
f_max = np.array(f_max)
f_boltzman = np.array(f_boltzman)
f_logsumexp = np.array(f_logsumexp)
f_pnorm = np.array(f_pnorm)

# Plot the results
fig, ax = plt.subplots()
ax.plot(x, f_max, label='Exact maximum', linewidth=0.5)
ax.plot(x, f_boltzman, label='Boltzmann maximum', linewidth=0.5, marker='o', markersize=2.5)
ax.plot(x, f_logsumexp, label='LogSumExp maximum', linewidth=0.5, marker='o', markersize=2.5)
ax.plot(x, f_pnorm, label='p-norm maximum', linewidth=0.5, marker='+', markersize=2.5)
# ax.axhline(0, color='black',linewidth=0.5)
# ax.axvline(0, color='black',linewidth=0.5)
ax.set_xlabel('x value')
ax.set_ylabel('y value')
# ax.set_xlim([-1, 1])
# ax.set_ylim([3.5, 6.5])
# ax.set_xticklabels(ax.get_xticks(), rotation=45)
# ax.set_yticklabels(ax.get_yticks())
ax.legend(fontsize=10)
# plt.savefig("smooth_maximum.png", dpi=500)
plt.show()